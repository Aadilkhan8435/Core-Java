Volatile - 
Volatile keyword is used to modify the value of a variable by different threads. It is also used to make classes thread safe.
It means that multiple threads can use a method and instance of the classes at the same time without any problem. 
The volatile keyword can be used either with primitive type or objects.

The volatile keyword cannot be used with classes or methods. However, it is used with variables. 

Example - 

class Test  
{  
static int var=5;  
}  

In the above example, assume that two threads are working on the same class. Both threads run on different processors where each thread has its local copy of var. 
If any thread modifies its value, the change will not reflect in the original one in the main memory. 
It leads to data inconsistency because the other thread is not aware of the modified value.

class Test  
{  
static volatile int var =5;  
}  
In the above example, static variables are class members that are shared among all objects. There is only one copy in the main memory. 
The value of a volatile variable will never be stored in the cache. All read and write will be done from and to the main memory.


When to use it?
It can be used as an alternative way of achieving synchronization in Java.
All reader threads will see the updated value of the volatile variable after completing the write operation
It is used to inform the compiler that multiple threads will access a particular statement. It prevents the compiler from doing any reordering or any optimization.
If you do not use volatile variable compiler will read it from cache value of volatile variable instead of reading from the main memory.
It reduces the risk of memory consistency error.
