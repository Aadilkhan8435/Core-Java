Atomic -

In multithreading, the shared entity mostly leads to a problem when concurrency is incorporated.
A shared entity such as, mutable object or variable, might be changed, which may result in the inconsistency of the program or database. 
So, it becomes crucial to deal with the shared entity while accessed concurrently. An atomic variable can be one of the alternatives in such a scenario. 

Java provides atomic classes such as AtomicInteger, AtomicLong, AtomicBoolean and AtomicReference. 
Objects of these classes represent the atomic variable of int, long, boolean, and object reference respectively.

Need of atomic variable - 

class Counter extends Thread {

	// Counter Variable
	int count = 0;

	// method which would be called upon
	// the start of execution of a thread
	public void run()
	{
		int max = 1_000_00_000;

		// incrementing counter
		// total of max times
		for (int i = 0; i < max; i++) {
			count++;
		}
	}
}

public class UnSafeCounter {
	public static void main(String[] args)
		throws InterruptedException
	{
		// Instance of Counter Class
		Counter c = new Counter();

		// Defining Two different threads
		Thread first = new Thread(c, "First");
		Thread second = new Thread(c, "Second");

		// Threads start executing
		first.start();
		second.start();

		// main thread will wait for
		// both threads to get completed
		first.join();
		second.join();

		// Printing final value of count variable
		System.out.println(c.count);
	}
}
In a single thread environment, the above-mentioned class will give the expected result only. But when a multithreaded environment is concerned, it may lead to inconsistent results. 
It happens because updating “var” is done in three steps: Reading, updating, and writing. 
If two or more threads try to update the value at the same time, then it may not update properly.


This issue can be solved using Lock and Synchronization, but not efficiently. 

1. Using lock analogy or synchronization: Synchronization or Locking can solve our problem, but it compromises time efficiency or performance. 
First, it mandates resource and thread scheduler to control lock. Second, when multiple threads attempt to acquire a lock, only one of them wins, rest are suspended or blocked. 
Suspending or blocking of threads can have a huge impact on performance.

2. Using atomic Variable

// Atomic counter Variable
    AtomicInteger count;

// Constructor of class
    Counter()
    {
        count = new AtomicInteger();
    }



Synchronized	                                                   Atomic	                                                    Volatile
It applies to methods only.	                                     It applies to variables only.	                            It also applies to variables only.
It ensures visibility along with atomicity.	                      It also ensures visibility along with atomicity.	        It ensures visibility, not atomicity.
We can't achieve the same.	                                      We can't achieve the same.	                              It stores in RAM, so accessing volatile variables is fast. 
                                                                                                                            But it does not provide thread-safety and synchronization.
It can be implemented as a synchronized block                    	We can't achieve the same.	                              We can't achieve the same.
or a synchronized method.
It can lock the same class object or a different class object.	  We can't achieve the same.	                              W e can't achieve the same.
