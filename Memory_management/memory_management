n Java, memory management is the process of allocation and de-allocation of objects, called Memory management. Java does memory management automatically.
Java uses an automatic memory management system called a garbage collector. Thus, we are not required to implement memory management logic in our application

Method Area
Method Area is a part of the heap memory which is shared among all the threads. It creates when the JVM starts up. 
It is used to store class structure, superclass name, interface name, and constructors. The JVM stores the following kinds of information in the method area:

Heap Area
Heap stores the actual objects. It creates when the JVM starts up. The user can control the heap if needed. It can be of fixed or dynamic size.
When you use a new keyword, the JVM creates an instance for the object in a heap. While the reference of that object stores in the stack. 
There exists only one heap for each running JVM process. When heap becomes full, the garbage is collected. 

Stack Area
Stack Area generates when a thread creates. It can be of either fixed or dynamic size. The stack memory is allocated per thread. 
It is used to store data and partial results. It contains references to heap objects. It also holds the value itself rather than a reference to an object from the heap.
The variables which are stored in the stack have certain visibility, called scope.


Native Method Stack
It is also known as C stack. It is a stack for native code written in a language other than Java. Java Native Interface (JNI) calls the native stack. 
The performance of the native stack depends on the OS.

PC Registers
Each thread has a Program Counter (PC) register associated with it. PC register stores the return address or a native pointer. 
It also contains the address of the JVM instructions currently being executed.
