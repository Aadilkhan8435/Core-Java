1 - java 8 optional 

the Optional class was introduced as part of the java.util package to deal with the problem of null values. 
It is a container object which may or may not contain a value. This helps to avoid NullPointerExceptions

1. of(T value)
This method returns an Optional with the specified non-null value. If the value is null, it throws a NullPointerException.

2. ofNullable(T value)
This method returns an Optional that may or may not contain a value. If the value is null, it returns an empty Optional instead of throwing an exception.

3. orElse(T other)
This method returns the value if present, otherwise returns the specified other value.

4. orElseGet(Supplier<? extends T> other)
This method returns the value if present, otherwise it returns the value from the Supplier.

        Optional<String> name = Optional.ofNullable("John");
        
        // Check if value is present
        name.ifPresent(value -> System.out.println("Name is: " + value));

--------------------------------------------------------------------------------------------

2 - Completable future

A CompletableFuture is a class introduced in Java 8 as part of the java.util.concurrent package, 
which represents a future result of an asynchronous computation. It provides a more flexible, 
non-blocking way to work with asynchronous programming in Java. Unlike the traditional Future class, 
CompletableFuture allows you to explicitly complete a computation and to chain multiple asynchronous tasks together in a declarative manner.

##### Key Components of CompletableFuture:

1. Asynchronous Execution
CompletableFuture provides methods for running tasks asynchronously, which means the tasks execute in a separate thread.

CompletableFuture<Void> future = CompletableFuture.runAsync(() -> { // write code here });
future.join();

2. Completion Methods
You can manually complete a CompletableFuture by using the complete() method, which allows you to set the result of the future computation.

3. Chaining Methods
One of the powerful features of CompletableFuture is the ability to chain multiple asynchronous tasks together. 
You can apply functions to the result of the previous computation using methods like thenApply(), thenAccept(), thenRun(), etc.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            return 5; // Initial value
        }).thenApply(result -> {
            return result * 2; // Multiply by 2
        }).thenApply(result -> {
            return result + 3; // Add 3
        });
        
        // Block and get the final result
        System.out.println(future.join());

4. Exception Handling
Handling errors in asynchronous tasks is important. CompletableFuture provides methods such as exceptionally() and handle() to handle exceptions.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            if (true) throw new RuntimeException("Something went wrong!");
            return 5;
        }).exceptionally(ex -> {
            System.out.println("Error: " + ex.getMessage());
            return 0;  // Provide a default value in case of error
        });
        
        // Get result
        System.out.println(future.join()); 

5. Combining Multiple Futures
CompletableFuture allows you to combine multiple futures using methods like thenCombine(), allOf(), and anyOf(). 
These methods allow you to wait for multiple asynchronous tasks and combine their results.

CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 5);
        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 10);
        
        CompletableFuture<Integer> combinedFuture = future1.thenCombine(future2, (result1, result2) -> {
            return result1 + result2;  // Combine both results
        });
        
        // Get result
        System.out.println(combinedFuture.join());  // op - 15

#### Methods of Completable future - 

1. supplyAsync()
This method is used to run an asynchronous task that supplies a result. It takes a Supplier (a function that provides a result) and returns a CompletableFuture.
CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 42);
        System.out.println(future.join());  // Output: 42

2. runAsync()
This method runs an asynchronous task that does not return a result. It takes a Runnable and returns a CompletableFuture<Void>.

CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
            System.out.println("Task is running asynchronously");
        });
        
        future.join();  // Block to wait for the task to complete

3. thenApply()
This method is used to apply a function to the result of the previous CompletableFuture. It returns a new CompletableFuture containing the transformed result.

 CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 5)
                .thenApply(result -> result * 2);
        System.out.println(future.join());  // Output: 10

4. thenAccept()
This method is similar to thenApply(), but it is used when you do not need to return a value after applying the function. It performs an action with the result.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 5)
                .thenAccept(result -> System.out.println(result * 2));  // Output: 10
        future.join();  // Wait for completion

thenCompose()
This method is used to chain another CompletableFuture that depends on the result of the previous computation. 
It is like thenApply(), but the function passed returns another CompletableFuture.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 5)
                .thenCompose(result -> CompletableFuture.supplyAsync(() -> result * 2));
        
        System.out.println(future.join());  // Output: 10

5. thenRun()
This method is used to execute a Runnable after the completion of the previous computation, but it does not use the result of the previous computation.
 
CompletableFuture<Void> future = CompletableFuture.supplyAsync(() -> 5)
                .thenRun(() -> System.out.println("Task completed"));
        future.join();  // Output: Task completed

6. exceptionally()
This method allows you to handle exceptions that occur during the execution of a CompletableFuture. 
It returns a new CompletableFuture with a fallback value in case of an exception.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            throw new RuntimeException("Something went wrong!");
        }).exceptionally(ex -> {
            System.out.println("Error: " + ex.getMessage());
            return 0;  // Fallback value
        });
        
        System.out.println(future.join());  // Output: Error: Something went wrong! 0

7. handle()
This method is similar to exceptionally(), but it allows you to handle both the result and the exception.
You can modify the result or return a default value in case of an exception.

CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            throw new RuntimeException("Something went wrong!");
        }).handle((result, ex) -> {
            if (ex != null) {
                System.out.println("Error: " + ex.getMessage());
                return 0;  // Fallback value
            }
            return result;
        });
        
        System.out.println(future.join());  // Output: Error: Something went wrong! 0

8. thenCombine()
This method is used to combine the results of two independent CompletableFuture objects. 
It applies a function to the results of both futures and returns a new CompletableFuture.
CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 5);
        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 10);
        
        CompletableFuture<Integer> combinedFuture = future1.thenCombine(future2, (result1, result2) -> result1 + result2);
        
        System.out.println(combinedFuture.join());  // Output: 15

9. allOf()
This method is used to wait for the completion of all the provided CompletableFuture instances. 
It returns a new CompletableFuture<Void> that completes when all the futures complete.

CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 5);
        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 10);
        
        CompletableFuture<Void> allOfFuture = CompletableFuture.allOf(future1, future2);
        allOfFuture.join();  // Wait for both futures to complete
        
        System.out.println("All futures completed.");

10. anyOf()
This method is used to wait for the completion of any one of the provided CompletableFuture instances.
It returns a new CompletableFuture that completes when the first future completes.

CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 5);
        CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 10);
        
        CompletableFuture<Object> anyOfFuture = CompletableFuture.anyOf(future1, future2);
        System.out.println(anyOfFuture.join());  // Output: 5 (whichever completes first)

11. complete(T value)
This method is used to manually complete a CompletableFuture. It sets the value of the future to value if the computation is not already completed.

CompletableFuture<String> future = new CompletableFuture<>();
// Manually completing the future
future.complete("Task Completed");
System.out.println(future.join());  // Output: Task Completed

######## D/B Future and Completable future

Part of	
java.util.concurrent.Future	
java.util.concurrent.CompletableFuture (extends Future)

API Limitations	
Basic methods like get(), cancel(), and isDone().	
Rich API with methods for chaining, combining, handling exceptions, etc.

Asynchronous Execution	
Doesn't provide a way to initiate async tasks directly; needs to be combined with ExecutorService or Thread	
Provides methods like supplyAsync(), runAsync() to easily execute asynchronous tasks

Chaining Tasks	
Does not support chaining tasks directly. You can only get the result or cancel it.	
Supports task chaining with methods like thenApply(), thenCompose(), thenCombine() for combining multiple asynchronous tasks

Exception Handling	
Basic exception handling using get() (throws ExecutionException).	
More advanced exception handling with methods like exceptionally() and handle().

Completion Handling	
No way to act when the task is completed (apart from get() or isDone()).	
Provides methods like whenComplete(), thenAccept(), and thenRun() to handle task completion (success or failure).

Blocking vs Non-blocking	
get() blocks until the result is available.	
join() and get() block similarly, but CompletableFuture can be non-blocking and run asynchronously with proper chaining.

Manual Completion	
Cannot manually complete a task.	
Allows manual completion with complete() and completeExceptionally().


Basic usage

Future - 

ExecutorService executor = Executors.newFixedThreadPool(1);
// Submit an asynchronous task
Future<Integer> future = executor.submit(() -> {
Thread.sleep(1000);
return 42;  // The result of the computation
});
        
// Blocking call to get the result
System.out.println("Result: " + future.get());  // Output: Result: 42
executor.shutdown();

############ D/B Get and Join

Exception Handling	
Throws a checked exception (ExecutionException) if the computation fails or is interrupted.	
Throws an unchecked exception (CompletionException) if the computation fails or is interrupted.

Exception Type	
Throws ExecutionException (which wraps the actual exception) and InterruptedException if the thread was interrupted.	
Throws CompletionException (which wraps the actual exception) but does not throw InterruptedException directly.

Handling InterruptedException	
Throws InterruptedException if the current thread is interrupted while waiting.	
Does not throw InterruptedException. It wraps it in a CompletionException instead.

Use Case	
get() is suitable when you want to handle exceptions explicitly using try-catch blocks.	
join() is generally used when you want to avoid dealing with checked exceptions and prefer an unchecked exception.

--------------------------------------------------------------------------------------------

3. Functional Interface

A functional interface in Java is an interface that has exactly one abstract method. 
It can have multiple default and static methods, but it must have only one abstract method.

Java introduced functional interfaces in Java 8 to support functional programming features such as lambda expressions and streams.

The @FunctionalInterface annotation is not required but is often used to indicate that an interface is intended to be a functional interface. 
If an interface annotated with @FunctionalInterface does not meet the requirements of a functional interface (i.e., it has more than one abstract method), 
the compiler will generate an error.

Why Was It Introduced?
Functional interfaces were introduced in Java 8 to enable functional programming features like lambda expressions and method references, 
making it easier to pass behavior as parameters, improve code readability, and support a more declarative style of programming.

Example: Printing "Hello World" Using a Functional Interface

@FunctionalInterface
interface Greeting {
    void sayHello();
}

Greeting greeting = () -> System.out.println("Hello World");
greeting.sayHello();

------------------------------------------------------------

4. Enhancement of concurrent hashmap in jdk 8

1. Support for Lambda Expressions and Functional Programming

        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
        
        map.put("a", 1);
        map.put("b", 2);
        map.put("c", 3);

        // Using forEach with lambda expression
        map.forEach((key, value) -> {
            System.out.println(key + ": " + value);
        });

2. computeIfAbsent() Method
The computeIfAbsent() method was introduced to allow for atomic computation and insertion of a value only if the key is not already present in the map.

How it works:
If the key is present, the map simply returns the associated value.
If the key is absent, it computes the value using the provided lambda expression and inserts it atomically.

 ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();

        // Only computes if the key is absent
        map.computeIfAbsent("a", k -> 100);  // Key 'a' is absent, computes and inserts 100
        map.computeIfAbsent("a", k -> 200);  // Key 'a' is present, does nothing

        System.out.println(map);  // Output: {a=100}

3. computeIfPresent() Method
The computeIfPresent() method allows you to compute a new value for a given key only if it is already present in the map. If the key is absent, no computation is done.

 ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
        
        map.put("a", 10);
        
        // Only computes if the key is present
        map.computeIfPresent("a", (key, value) -> value + 100);  // Value is 110
        map.computeIfPresent("b", (key, value) -> value + 100);  // No change (key 'b' doesn't exist)

        System.out.println(map);  // Output: {a=110}

4. merge() Method
The merge() method is introduced to atomically combine an existing value and a new value using a provided function. 
If the key is absent, the new value is inserted. If the key is present, the function is used to combine the current value and the new value.

 ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
        
        map.put("a", 10);
        
        // Merge two values using a given function
        map.merge("a", 5, (oldValue, newValue) -> oldValue + newValue);  // Result: 15
        map.merge("b", 20, (oldValue, newValue) -> oldValue + newValue);  // Result: 20 (new key 'b')

        System.out.println(map);  // Output: {a=15, b=20}

5. replaceAll() Method
The replaceAll() method was added to allow applying a function to all values in the map, updating them atomically.

ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
        
        map.put("a", 10);
        map.put("b", 20);

        // Using replaceAll to double all values
        map.replaceAll((key, value) -> value * 2);

        System.out.println(map);  // Output: {a=20, b=40}

6. Improvements in Internal Locking Mechanism

---------------------------------------------------------------------------

5. Stream API 

In Java, the Stream API introduced in Java 8 is a powerful tool for working with sequences of data in a functional programming style. 
The API provides methods for processing collections of data in a concise and declarative manner.

Streams have two main types of operations:

1. Intermediate Operations

Lazy: Intermediate operations are not executed until a terminal operation is invoked.
Return a new stream: Intermediate operations return a new stream, allowing for method chaining.

Common Intermediate Operations:
filter(): Filters elements based on a condition (predicate).
map(): Transforms each element using a function.
flatMap(): Flattens nested collections into a single stream.
distinct(): Removes duplicate elements.
sorted(): Sorts elements based on a comparator or natural ordering.
peek(): Allows inspecting elements as they pass through the stream (useful for debugging).
limit(): Limits the number of elements in the stream.
skip(): Skips the first N elements of the stream.

2. Terminal Operations

Eager: Terminal operations trigger the processing of the stream.
Consume the stream: Once a terminal operation is invoked, the stream is closed and can no longer be used.

Common Terminal Operations:
collect(): Collects elements into a collection (e.g., List, Set).
forEach(): Iterates over each element and performs an action.
reduce(): Performs a reduction on the elements (e.g., summing them).
count(): Returns the number of elements in the stream.
anyMatch(), allMatch(), noneMatch(): Check whether any, all, or no elements match a given predicate.
findFirst(): Returns the first element in the stream, if present.
findAny(): Returns any element from the stream (may be optimized for parallel streams).
min(), max(): Find the minimum or maximum element based on a comparator.

# Difference between map and flatmap

map():

Transforms each element of the stream into another object.
The result is a Stream of transformed values, but each element in the stream is wrapped in another container (like Optional or List).
It does not flatten nested structures.

            List<String> sentences = Arrays.asList("Hello world", "Java stream", "flatMap example");
        
        // Using map to convert each sentence into a list of words (List of Lists)
        List<List<String>> result = sentences.stream()
            .map(sentence -> Arrays.asList(sentence.split(" ")))  // Split each sentence into words
            .collect(Collectors.toList());  // Collect as a List of Lists
        
        System.out.println(result);  // Output: [[Hello, world], [Java, stream], [flatMap, example]]

flatMap():

Similar to map(), but it flattens the result.
It transforms each element into a stream of objects (or other collections) and flattens them into a single stream.
The result is a flat stream of elements instead of a stream of collections.

 List<String> sentences = Arrays.asList("Hello world", "Java stream", "flatMap example");
        
        // Using flatMap to convert each sentence into a stream of words and flatten them
        List<String> result = sentences.stream()
            .flatMap(sentence -> Arrays.stream(sentence.split(" ")))  // Split each sentence and flatten into a stream of words
            .collect(Collectors.toList());  // Collect as a single List of words
        
        System.out.println(result);  // Output: [Hello, world, Java, stream, flatMap, example]

--------------------------------------------------------------------------------------------------------------

Date and Time api

Before Java 8, the date and time API in Java was primarily handled by the java.util.Date and java.util.Calendar classes. 
While these classes were functional, they had several limitations and issues that made them difficult to work with. 
Java 8 introduced the new Date and Time API in the java.time package to address these problems.

Before Java 8, working with date and time was difficult due to mutable, thread-unsafe, and inconsistent APIs. 
The introduction of the java.time API in Java 8 resolved these issues by providing:

Immutable and thread-safe classes.
Clear and intuitive methods for date-time manipulation.
Better support for time zones, durations, and periods.
Separation of concerns for date, time, and durations.
This made date and time manipulation in Java much more powerful and easier to work with.


LocalDate date = LocalDate.now();  // Gets the current date
LocalDate newDate = date.plusDays(5);  // Adds 5 days

LocalTime time = LocalTime.now();  // Gets the current time
LocalTime newTime = time.plusHours(2);  // Adds 2 hours

LocalDateTime dateTime = LocalDateTime.now();  // Current date and time
LocalDateTime newDateTime = dateTime.minusWeeks(1);  // Subtracts a week

ZonedDateTime zonedDateTime = ZonedDateTime.now();  // Current date and time with time zone
ZonedDateTime newZonedDateTime = zonedDateTime.withZoneSameInstant(ZoneId.of("UTC"));  // Convert to UTC

-----------------------------------------------------------------------------------------------------------
