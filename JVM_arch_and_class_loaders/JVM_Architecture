
JDK - Java Development Kit (JDK) is a software development environment used for developing Java applications and applets. 
      It includes the Java Runtime Environment (JRE), an interpreter/loader (Java), a compiler (javac), 
      an archiver (jar), a documentation generator (Javadoc), and other tools needed in Java development. 
      - jdk -> JRE + JVM
      JDK (Java Development Kit) is a Kit that provides the environment to develop and execute(run) the Java program. 
      JDK is a kit(or package) that includes two things
        -Development Tools(to provide an environment to develop your java programs)
        -JRE (to execute your java program).

JRE - Environment to make a run of our program. The Java Runtime Environment provides the minimum requirements for executing a Java application; 
      it consists of the Java Virtual Machine (JVM), core classes, and supporting files. 
      - JRE -> JVM
      - it contains set of libraries like utill, lang, I/O packages. and it also contains JVM.

JVM - Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line, 
      hence it is also known as an interpreter.
      -WORA


*********** JVM Architecture *************

Abc.java ---COMPILE---> Abc.class(byte - code) file

Class Loader Subsystem

It is mainly responsible for three activities. 

Loading
Linking
Initialization


Loading: The Class loader reads the “.class” file, generate the corresponding binary data and save it in the method area. 
         For each “.class” file, JVM stores the following information in the method area. 
         The fully qualified name of the loaded class and its immediate parent class.Whether the “.class” file is related to Class or Interface or Enum.
          Modifier, Variables and Method information etc.

         - After loading the “.class” file, JVM creates an object of type Class to represent this file in the heap memory.
         - For every loaded “.class” file, only one object of the class is created. 

Linking: Performs verification, preparation, and (optionally) resolution. 
         Verification: It ensures the correctness of the .class file i.e. it checks whether this file is properly formatted and generated by a valid compiler or not. 
                       If verification fails, we get run-time exception java.lang.VerifyError.This activity is done by the component ByteCodeVerifier. 
                       Once this activity is completed then the class file is ready for compilation.
         Preparation: JVM allocates memory for class static variables and initializing the memory to default values. 
         Resolution: It is the process of replacing symbolic references from the type with direct references. It is done by searching into the method area to locate the referenced entity.

Initialization: In this phase, all static variables are assigned with their values defined in the code and static block(if any). 
                This is executed from top to bottom in a class and from parent to child in the class hierarchy. 



