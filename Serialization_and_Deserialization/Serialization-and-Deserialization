Serialization and Deserialization -

Serialization in Java is a mechanism of writing the state of an object into a byte-stream. It is mainly used in Hibernate, RMI, JPA, EJB and JMS technologies.

The reverse operation of serialization is called deserialization where byte-stream is converted into an object. The serialization and deserialization process is platform-independent, 
it means you can serialize an object on one platform and deserialize it on a different platform.

For serializing the object, we call the writeObject() method of ObjectOutputStream class, and for deserialization we call the readObject() method of ObjectInputStream class.

We must have to implement the Serializable interface for serializing the object.

Serializable is a marker interface (has no data member and method). It is used to "mark" Java classes so that the objects of these classes may get a certain capability. The Cloneable and Remote are also marker interfaces.

The Serializable interface must be implemented by the class whose object needs to be persisted.

The String class and all the wrapper classes implement the java.io.Serializable interface by default.

Serialization with IS-A relationship
If a class implements Serializable interface then all its sub classes will also be serializable.

Serialization with HAS-A relationship
If a class has a reference to another class, all the references must be Serializable 
otherwise serialization process will not be performed. In such case, NotSerializableException is thrown at runtime.

Java Serialization with the static data member
If there is any static data member in a class, it will not be serialized because static is the part of class not object.

Java Serialization with array or collection
Rule: In case of array or collection, all the objects of array or collection must be serializable. If any object is not serialiizable, serialization will be failed.

*********************************************************
Externalizable in java
The Externalizable interface provides the facility of writing the state of an object into a byte stream in compress format. It is not a marker interface.

The Externalizable interface provides two methods:

public void writeExternal(ObjectOutput out) throws IOException
public void readExternal(ObjectInput in) throws IOException

Java Transient Keyword
If you don't want to serialize any data member of a class, you can mark it as transient


SerialVersionUID - 
The serialization process at runtime associates an id with each Serializable class which is known as SerialVersionUID. 
It is used to verify the sender and receiver of the serialized object. The sender and receiver must be the same. To verify it, SerialVersionUID is used
The sender and receiver must have the same SerialVersionUID, otherwise, InvalidClassException will be thrown when you deserialize the object

ex - private static final long serialVersionUID=1L;
