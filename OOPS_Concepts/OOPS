OOPS - 
     As the name suggests, Object-Oriented Programming or OOPs refers to languages that use objects in programming, 
     they use objects as a primary source to implement what is to happen in the code. Objects are seen by the viewer or user, 
     performing tasks assigned by you. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc. in programming


OOPS concepts are as follows: 
1.Class
2.Object 
3.Method and method passing
4.Pillars of OOPs
  a.Abstraction
  b.Encapsulation
  c.Inheritance
  d.Polymorphism
    -Compile-time polymorphism
    -Runtime polymorphism

Class - A class is a user-defined blueprint or prototype from which objects are created. 
        It represents the set of properties or methods that are common to all objects of one type.
        Using classes, you can create multiple objects with the same behavior instead of writing their code multiple times.
        This includes classes for objects occurring more than once in your code. 
        In general, class declarations can include these components in order: 
         1. Modifiers
         2. Class name:
         3. Superclass 
         4. Interfaces 
         5. Body

Object - An object is a basic unit of Object-Oriented Programming that represents real-life entities. 
        A typical Java program creates many objects, which as you know, interact by invoking methods. 
An object mainly consists of: 
State: It is represented by the attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by the methods of an object. It also reflects the response of an object to other objects.
Identity: It is a unique name given to an object that enables it to interact with other objects.
Method: A method is a collection of statements that perform some specific task and return the result to the caller. 
        A method can perform some specific task without returning anything. Methods allow us to reuse the code without retyping it, 
        which is why they are considered time savers. In Java, every method must be part of some class, which is different from languages like C, C++, and Python.

Abstraction -
        Hiding Internal details and showing only functionalities to the users.
        In Java, abstraction is achieved by interfaces and abstract classes. We can achieve 100% abstraction using interfaces. 
        The abstract method contains only method declaration but not implementation.

Example -
        //abstract class 
abstract class GFG{ 
//abstract methods declaration 
abstract void add(); 
abstract void mul(); 
abstract void div(); 
} 

 Encapsulation - It is defined as the wrapping up of data under a single unit object.
                 It is the mechanism that binds together the code and the data it manipulates.
                 it is a protective shield that prevents the data from being accessed by the code outside this shield.

The variables or the data in a class is hidden from any other class and can be accessed only through any member function of the class in which they are declared.
In encapsulation, the data in a class is hidden from other classes, which is similar to what data-hiding does. So, the terms “encapsulation” and “data-hiding” are used interchangeably.
Encapsulation can be achieved by declaring all the variables in a class as private and writing public methods in the class to set and get the values of the variables.

Inheritance - 

It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class.
We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.
Reusability


Polymorphism -
Many behaviours

