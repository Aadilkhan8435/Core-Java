Factory Method Pattern -

define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate.
In other words, subclasses are responsible to create the instance of the class.

The Factory Method Pattern is also known as Virtual Constructor.

It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code.

Usage of Factory Design Pattern
When a class doesn't know what sub-classes will be required to create
When a class wants that its sub-classes specify the objects to be created.

Example ***********************

Step 1: Define the Notification Interface

interface Notification {
    void notifyUser();
}

Step 2: Create Concrete Notification Classes

class EmailNotification implements Notification {
    @Override
    public void notifyUser() {
        System.out.println("Sending an Email Notification");
    }
}

class SMSNotification implements Notification {
    @Override
    public void notifyUser() {
        System.out.println("Sending an SMS Notification");
    }
}

3. Create the Notification Service Using

class NotificationFactory {
    public void sendNotification(String type) {
        if (type.equalsIgnoreCase("email")) {
            new EmailNotification().notifyUser();
        } else if (type.equalsIgnoreCase("sms")) {
            new SMSNotification().notifyUser();
        } else if (type.equalsIgnoreCase("push")) {
            new PushNotification().notifyUser();
        } else {
            System.out.println("Unknown notification type.");
        }
    }
}

4.
public class Client {
    public static void main(String[] args) {
        NotificationFactory service = new NotificationFactory();
        service.sendNotification("email");  // Outputs: Sending an Email Notification
        service.sendNotification("sms");     // Outputs: Sending an SMS Notification
        service.sendNotification("push");    // Outputs: Sending a Push Notification
        service.sendNotification("unknown");  // Outputs: Unknown notification type.
    }
}

