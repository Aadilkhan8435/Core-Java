Strategy Pattern
defines a family of functionality, encapsulate each one, and make them interchangeable
It defines each behavior within its own class, eliminating the need for conditional statements.
It makes it easier to extend and incorporate new behavior without changing the application.

Usage:
When the multiple classes differ only in their behaviors.e.g. Servlet API.
It is used when you need different variations of an algorithm.


Step 1:

Create a Strategy interface
public interface Strategy {  
    public float calculation(float a, float b);  
}

Step 2:

Create a Addition class and Subtraction class that will implement Startegy interface.

public class Addition implements Strategy{  
    @Override  
    public float calculation(float a, float b) {  
        return a+b;  
    }    
}

public class Subtraction  implements Strategy{  
    @Override  
    public float calculation(float a, float b) {  
        return a-b;  
    }  
}

Step 3:
Create a Context class that will ask from Startegy interface to execute the type of strategy.

public class Context {  
       private Strategy strategy;  
       
       public Context(Strategy strategy){  
          this.strategy = strategy;  
       }  
  
       public float executeStrategy(float num1, float num2){  
          return strategy.calculation(num1, num2);  
       }  
}

Step 4:

Create a StartegyPatternDemo class.

public class StrategyPatternDemo {  
      
    public static void main(String[] args) throws NumberFormatException, IOException {  
          
          BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
          System.out.print("Enter the first value: ");  
          float value1=Float.parseFloat(br.readLine());  
          System.out.print("Enter the second value: ");  
          float value2=Float.parseFloat(br.readLine());  

          Context context = new Context(new Addition());          
          System.out.println("Addition = " + context.executeStrategy(value1, value2));  
  
          context = new Context(new Subtraction());       
          System.out.println("Subtraction = " + context.executeStrategy(value1, value2));  
 
       }  
  
}
