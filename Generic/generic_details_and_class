Generic - 

The Java Generics programming is introduced in J2SE 5 to deal with type-safe objects. It makes the code stable by detecting the bugs at compile time.
Before generics, we can store any type of objects in the collection, i.e., non-generic. Now generics force the java programmer to store a specific type of objects.

Advantage of Java Generics
Type-safety: We can hold only a single type of objects in generics. It doesn?t allow to store other objects.
Type casting is not required: There is no need to typecast the object.
Compile-Time Checking: It is checked at compile time so problem will not occur at runtime.


Generic class
A class that can refer to any type is known as a generic class. Here, we are using the T type parameter to create the generic class of specific type.
class MyGen<T>{  
T obj;  
void add(T obj){this.obj=obj;}  
T get(){return obj;}  
}

The T type indicates that it can refer to any type (like String, Integer, and Employee). The type you specify for the class will be used to store and retrieve the data.

Type Parameters
The type parameters naming conventions are important to learn generics thoroughly. The common type parameters are as follows:
T - Type
E - Element
K - Key
N - Number
V - Value

Generic methods - accept any type of arguments. Here, the scope of arguments is limited to the method where it is declared. It allows static as well as non-static methods.

public class TestGenerics4{  
   public static < E > void printArray(E[] elements) {  
        for ( E element : elements){          
            System.out.println(element );  
         }  
         System.out.println();  
    }  
    public static void main( String args[] ) {  
        Integer[] intArray = { 10, 20, 30, 40, 50 };  
        Character[] charArray = { 'J', 'A', 'V', 'A', 'T','P','O','I','N','T' };  
  
        System.out.println( "Printing Integer Array" );  
        printArray( intArray  );   
  
       System.out.println( "Printing Character Array" );  
        printArray( charArray );   
    }   
}

***********************************
Wildcard in Java Generics
The ? (question mark) symbol represents the wildcard element. It means any type. If we write <? extends Number>, 
it means any child class of Number, e.g., Integer, Float, and double. Now we can call the method of Number class through any child class object.

