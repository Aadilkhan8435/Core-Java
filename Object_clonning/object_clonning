Object clonning -> 

The object cloning is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.
The java.lang.Cloneable interface must be implemented by the class whose object clone we want to create. 
If we don't implement Cloneable interface, clone() method generates CloneNotSupportedException.
The clone() method is defined in the Object class.

Why use clone() method ?
The clone() method saves the extra processing task for creating the exact copy of an object.
 If we perform it by using the new keyword, it will take a lot of processing time to be performed that is why we use object cloning.

Advantages -> 
1.You don't need to write lengthy and repetitive codes. Just use an abstract class with a 4- or 5-line long clone() method.
2.It is the easiest and most efficient way for copying objects, especially if we are applying it to an already developed or an old project. 
Just define a parent class, implement Cloneable in it, provide the definition of the clone() method and the task will be done.
3.Clone() is the fastest way to copy array.

Disadvantages ->
1.To use the Object.clone() method, we have to change a lot of syntaxes to our code, like implementing a Cloneable interface, 
defining the clone() method and handling CloneNotSupportedException, and finally, calling Object.clone() etc.
2.Object.clone() is protected, so we have to provide our own clone() and indirectly call Object.clone() from it.
3.If you want to write a clone method in a child class then all of its superclasses should define the clone() method in them or inherit it from another parent class. 
Otherwise, the super.clone() chain will fail.
4. Object.clone() supports only shallow copying but we will need to override it if we need deep cloning.


Shallow vs Deep copy

Shallow Copy	                                                              Deep Copy
It is fast as no new memory is allocated.	                                It is slow as new memory is allocated.
Changes in one entity is reflected in other entity.	                      Changes in one entity are not reflected in changes in another identity.
Changes will not get reflected in primitive data types.	                   Changes will not get reflected in primitive data types
object type reference will get copied                                      object type reference will not get copied
The default version of the clone() method supports shallow copy.	         In order to make the clone() method support the deep copy, one has to override the clone() method.
A shallow copy is less expensive.	                                        Deep copy is highly expensive.
Cloned object and the original object are not disjoint.                   Cloned object and the original object are disjoint 



Shallow Cloning: Copies the object, but shared references to mutable objects lead to changes affecting both objects.

class Address {
    String city;

    Address(String city) {
        this.city = city;
    }
}

class Person implements Cloneable {
    String name;
    Address address;

    Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone(); // Shallow clone
    }
}

public class ShallowCloneExample {
    public static void main(String[] args) throws CloneNotSupportedException {
        Address address = new Address("New York");
        Person person1 = new Person("Alice", address);

        Person person2 = (Person) person1.clone(); // Cloning person1

        System.out.println("Before modifying:");
        System.out.println(person1.address.city); // Output: New York
        System.out.println(person2.address.city); // Output: New York

        // Modifying the address of person2
        person2.address.city = "Los Angeles";

        System.out.println("After modifying:");
        System.out.println(person1.address.city); // Output: Los Angeles
        System.out.println(person2.address.city); // Output: Los Angeles
    }
}


Deep Cloning: Copies the object and all objects it references, resulting in completely independent objects.
class Address {
    String city;

    Address(String city) {
        this.city = city;
    }

    // Deep clone method
    public Address deepClone() {
        return new Address(this.city);
    }
}

class Person implements Cloneable {
    String name;
    Address address;

    Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        Person cloned = (Person) super.clone(); // Shallow clone
        cloned.address = this.address.deepClone(); // Deep clone the Address
        return cloned;
    }
}

public class DeepCloneExample {
    public static void main(String[] args) throws CloneNotSupportedException {
        Address address = new Address("New York");
        Person person1 = new Person("Alice", address);

        Person person2 = (Person) person1.clone(); // Cloning person1

        System.out.println("Before modifying:");
        System.out.println(person1.address.city); // Output: New York
        System.out.println(person2.address.city); // Output: New York

        // Modifying the address of person2
        person2.address.city = "Los Angeles";

        System.out.println("After modifying:");
        System.out.println(person1.address.city); // Output: New York
        System.out.println(person2.address.city); // Output: Los Angeles
    }
}
