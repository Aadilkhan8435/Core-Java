Thread.sleep method -

Whenever the Thread.sleep() methods execute, it always halts the execution of the current thread.

Whenever another thread does interruption while the current thread is already in the sleep mode, then the InterruptedException is thrown.

public static void sleep(long mls) throws InterruptedException   --> native method
public static void sleep(long mls, int nanos) throws InterruptedException   --> non native method

he native, as well as the non-native method, throw a checked Exception. Therefore, either try-catch block or the throws keyword can work here.

****************************
 sleep() Method in Java: When the sleeping time is -ive
java.lang.IllegalArgumentException: timeout value is negative

*********************

Can we start a thread twice
No. After starting a thread, it can never be started again. 
If you does so, an IllegalThreadStateException is thrown. In such case, thread will run once but for second time, it will throw exception.

public class TestThreadTwice1 extends Thread{  
 public void run(){  
   System.out.println("running...");  
 }  
 public static void main(String args[]){  
  TestThreadTwice1 t1=new TestThreadTwice1();  
  t1.start();  
  t1.start();  
 }  
}  

output - running
Exception in thread "main" java.lang.IllegalThreadStateException
